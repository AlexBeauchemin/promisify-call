{
  "name": "Promisify-call",
  "tagline": "Promisify a function call so users can call a function with a callback or get a promise",
  "body": "# promisify-call\r\n\r\nPromisify a function call so users can call a function with a callback or get a promise.\r\n\r\n## Installation\r\n\r\n`npm install promisify-call`\r\n\r\n## Usage\r\n\r\n```js\r\nfunction _uppercase(param, fn) {\r\n  setTimeout(() => {\r\n    return fn(null, param.toUpperCase());\r\n  }, 50);\r\n}\r\n\r\nfunction uppercase(param, fn) {\r\n  return promisifyCall(this, _uppercase, ...arguments);\r\n}\r\n\r\n// now we can call it using callback-style\r\nuppercase('foo', (err, res) => {\r\n  console.log(res); // FOO\r\n});\r\n\r\n// OR promise style\r\nconst res = await uppercase('foo');\r\nconsole.log(res); // FOO\r\n```\r\n\r\n## API Reference\r\n\r\n<a name=\"promisifyCall\"></a>\r\n\r\n### promisifyCall(ctx, fn, ...args) â‡’ <code>undefined</code> &#124; <code>\\*</code> &#124; <code>Promise</code>\r\nPromisifies the call to <code>fn</code> if appropriate given the arguments.\r\nCalls the function <code>fn</code> either using callback style if last argument is a function.\r\nIf last argument is not a function, <code>fn</code> is called returning a promise.\r\nThis lets you create API that can be called in either fashions.\r\n\r\n**Kind**: global function  \r\n**Returns**: <code>undefined</code> &#124; <code>\\*</code> &#124; <code>Promise</code> - Promise if promisified  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| ctx | <code>Object</code> | context / this |\r\n| fn | <code>function</code> | The function to call |\r\n| ...args | <code>arguments</code> | Arguments |\r\n\r\n## License\r\n\r\nCopyright 2015 Bojan D.\r\n\r\nLicensed under the MIT License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}